// <auto-generated />
using System;
using DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccess.Migrations
{
    [DbContext(typeof(BnBDbContext))]
    [Migration("20210528085907_ChangeContactInherit")]
    partial class ChangeContactInherit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AmenityBnB", b =>
                {
                    b.Property<int>("AmenitiesAmenityId")
                        .HasColumnType("int");

                    b.Property<int>("BnBsBnBId")
                        .HasColumnType("int");

                    b.HasKey("AmenitiesAmenityId", "BnBsBnBId");

                    b.HasIndex("BnBsBnBId");

                    b.ToTable("AmenityBnB");

                    b.HasData(
                        new
                        {
                            AmenitiesAmenityId = 1,
                            BnBsBnBId = 1
                        },
                        new
                        {
                            AmenitiesAmenityId = 1,
                            BnBsBnBId = 5
                        },
                        new
                        {
                            AmenitiesAmenityId = 1,
                            BnBsBnBId = 3
                        },
                        new
                        {
                            AmenitiesAmenityId = 1,
                            BnBsBnBId = 4
                        },
                        new
                        {
                            AmenitiesAmenityId = 2,
                            BnBsBnBId = 3
                        },
                        new
                        {
                            AmenitiesAmenityId = 3,
                            BnBsBnBId = 1
                        },
                        new
                        {
                            AmenitiesAmenityId = 3,
                            BnBsBnBId = 3
                        },
                        new
                        {
                            AmenitiesAmenityId = 4,
                            BnBsBnBId = 1
                        },
                        new
                        {
                            AmenitiesAmenityId = 4,
                            BnBsBnBId = 3
                        },
                        new
                        {
                            AmenitiesAmenityId = 4,
                            BnBsBnBId = 5
                        },
                        new
                        {
                            AmenitiesAmenityId = 5,
                            BnBsBnBId = 2
                        },
                        new
                        {
                            AmenitiesAmenityId = 5,
                            BnBsBnBId = 4
                        });
                });

            modelBuilder.Entity("AmenityRoom", b =>
                {
                    b.Property<int>("AmenitiesAmenityId")
                        .HasColumnType("int");

                    b.Property<int>("RoomsRoomId")
                        .HasColumnType("int");

                    b.HasKey("AmenitiesAmenityId", "RoomsRoomId");

                    b.HasIndex("RoomsRoomId");

                    b.ToTable("AmenityRoom");

                    b.HasData(
                        new
                        {
                            AmenitiesAmenityId = 1,
                            RoomsRoomId = 1
                        },
                        new
                        {
                            AmenitiesAmenityId = 1,
                            RoomsRoomId = 2
                        },
                        new
                        {
                            AmenitiesAmenityId = 1,
                            RoomsRoomId = 3
                        },
                        new
                        {
                            AmenitiesAmenityId = 1,
                            RoomsRoomId = 7
                        },
                        new
                        {
                            AmenitiesAmenityId = 1,
                            RoomsRoomId = 8
                        },
                        new
                        {
                            AmenitiesAmenityId = 1,
                            RoomsRoomId = 9
                        },
                        new
                        {
                            AmenitiesAmenityId = 1,
                            RoomsRoomId = 10
                        },
                        new
                        {
                            AmenitiesAmenityId = 1,
                            RoomsRoomId = 11
                        },
                        new
                        {
                            AmenitiesAmenityId = 1,
                            RoomsRoomId = 12
                        },
                        new
                        {
                            AmenitiesAmenityId = 3,
                            RoomsRoomId = 7
                        },
                        new
                        {
                            AmenitiesAmenityId = 3,
                            RoomsRoomId = 10
                        },
                        new
                        {
                            AmenitiesAmenityId = 3,
                            RoomsRoomId = 11
                        },
                        new
                        {
                            AmenitiesAmenityId = 4,
                            RoomsRoomId = 11
                        },
                        new
                        {
                            AmenitiesAmenityId = 4,
                            RoomsRoomId = 5
                        });
                });

            modelBuilder.Entity("DataAccess.Data.Amenity", b =>
                {
                    b.Property<int>("AmenityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AmenityDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AmenityIcon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AmenityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("AmenityRate")
                        .HasColumnType("float");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("AmenityId");

                    b.ToTable("Amenities");

                    b.HasData(
                        new
                        {
                            AmenityId = 1,
                            AmenityDescription = "We don't charge you for using our wifi.",
                            AmenityName = "free wifi",
                            AmenityRate = 0.0,
                            CreatedOn = new DateTime(2021, 5, 28, 10, 59, 6, 520, DateTimeKind.Local).AddTicks(6892),
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AmenityId = 2,
                            AmenityDescription = "We don't swim in your toilet, so please don't pee in our pool.",
                            AmenityName = "pool",
                            AmenityRate = 20.0,
                            CreatedOn = new DateTime(2021, 5, 28, 10, 59, 6, 524, DateTimeKind.Local).AddTicks(7576),
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AmenityId = 3,
                            AmenityDescription = "For people who like to sweat",
                            AmenityName = "sauna",
                            AmenityRate = 25.0,
                            CreatedOn = new DateTime(2021, 5, 28, 10, 59, 6, 524, DateTimeKind.Local).AddTicks(7660),
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AmenityId = 4,
                            AmenityDescription = "The relaxing kind, not the Japanese maffia.",
                            AmenityName = "jacuzzi",
                            AmenityRate = 33.0,
                            CreatedOn = new DateTime(2021, 5, 28, 10, 59, 6, 524, DateTimeKind.Local).AddTicks(7669),
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AmenityId = 5,
                            AmenityDescription = "For rainy days.",
                            AmenityName = "pingpongtafelke",
                            AmenityRate = 0.0,
                            CreatedOn = new DateTime(2021, 5, 28, 10, 59, 6, 524, DateTimeKind.Local).AddTicks(7674),
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("DataAccess.Data.BnB", b =>
                {
                    b.Property<int>("BnBId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BankAccountNr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BnBDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BnBName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Municipality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("VATnr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BnBId");

                    b.ToTable("BnBs");

                    b.HasData(
                        new
                        {
                            BnBId = 1,
                            BankAccountNr = "BE59889nogmeerdiefstal",
                            BnBName = "Boerenhol",
                            ContactId = 1,
                            CreatedOn = new DateTime(2021, 5, 28, 10, 59, 6, 529, DateTimeKind.Local).AddTicks(9870),
                            HouseNumber = "4",
                            Municipality = "Reningelst",
                            PostalCode = 8970,
                            Province = "West-Vlaanderen",
                            StreetName = "Driegoenstraat",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VATnr = "BE3524874diefstal"
                        },
                        new
                        {
                            BnBId = 2,
                            BankAccountNr = "BE59654nogmeerdiefstal",
                            BnBName = "Boskant",
                            ContactId = 2,
                            CreatedOn = new DateTime(2021, 5, 28, 10, 59, 6, 530, DateTimeKind.Local).AddTicks(4389),
                            HouseNumber = "8",
                            Municipality = "Helchteren",
                            PostalCode = 3530,
                            Province = "Limburg",
                            StreetName = "Terrillstraat",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VATnr = "BE3526654diefstal"
                        },
                        new
                        {
                            BnBId = 3,
                            BankAccountNr = "BE59987nogmeerdiefstal",
                            BnBName = "Scheldezicht",
                            ContactId = 2,
                            CreatedOn = new DateTime(2021, 5, 28, 10, 59, 6, 530, DateTimeKind.Local).AddTicks(4409),
                            HouseNumber = "88",
                            Municipality = "Linkeroever",
                            PostalCode = 2100,
                            Province = "Antwerpen",
                            StreetName = "Bollekeslei",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VATnr = "BE3524987diefstal"
                        },
                        new
                        {
                            BnBId = 4,
                            BankAccountNr = "BE59123nogmeerdiefstal",
                            BnBName = "De Wieg",
                            ContactId = 3,
                            CreatedOn = new DateTime(2021, 5, 28, 10, 59, 6, 530, DateTimeKind.Local).AddTicks(4414),
                            HouseNumber = "44",
                            Municipality = "Kester",
                            PostalCode = 1730,
                            Province = "Vlaams-Brabant",
                            StreetName = "Beschavingsstraat",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VATnr = "BE3524123diefstal"
                        },
                        new
                        {
                            BnBId = 5,
                            BankAccountNr = "BE59789nogmeerdiefstal",
                            BnBName = "Nie Neute",
                            ContactId = 4,
                            CreatedOn = new DateTime(2021, 5, 28, 10, 59, 6, 530, DateTimeKind.Local).AddTicks(4418),
                            HouseNumber = "24",
                            Municipality = "Merelbeke",
                            PostalCode = 9300,
                            Province = "Oost-Vlaanderen",
                            StreetName = "Ledebergstraat",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VATnr = "BE3524789diefstal"
                        });
                });

            modelBuilder.Entity("DataAccess.Data.BnBImage", b =>
                {
                    b.Property<int>("BnBImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BnBId")
                        .HasColumnType("int");

                    b.Property<string>("BnBImageSourceUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("BnBImageId");

                    b.HasIndex("BnBId");

                    b.ToTable("BnBImages");
                });

            modelBuilder.Entity("DataAccess.Data.Contact", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("BnBId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("BnBId")
                        .IsUnique()
                        .HasFilter("[BnBId] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "55a9596e-76f5-4de5-8534-d5fb85ca4b01",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "12ef35fd-06f7-4fe0-abcc-516cb6d80582",
                            ContactName = "Arthur Blanckaert",
                            CreatedOn = new DateTime(2021, 5, 28, 10, 59, 6, 529, DateTimeKind.Local).AddTicks(1001),
                            Email = "tuur@zanger.be",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "016/026.754",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ef851768-1be4-470c-87c4-9f0c74be0369",
                            TwoFactorEnabled = false,
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "0a901eab-e90b-43f5-a8d4-fdb25a618b42",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d8d33334-8f0c-441b-8247-208c6cd2b5a2",
                            ContactName = "Eddy Wally",
                            CreatedOn = new DateTime(2021, 5, 28, 10, 59, 6, 529, DateTimeKind.Local).AddTicks(3181),
                            Email = "wally@zanger.be",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "09/657.237",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "319034f2-bd95-4c84-9956-adb4f805e36c",
                            TwoFactorEnabled = false,
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "441f0d6e-8895-4aa9-9166-fe78b092f243",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "62b3b5db-4df8-4884-83a4-370cbec3bc8e",
                            ContactName = "Rocking Moustache",
                            CreatedOn = new DateTime(2021, 5, 28, 10, 59, 6, 529, DateTimeKind.Local).AddTicks(3282),
                            Email = "moustache@zanger.be",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "016/981.247",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f4be213b-6eae-4495-956e-16585daf8f56",
                            TwoFactorEnabled = false,
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "671e29c3-c61c-4874-991b-a21b0baca6c8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4487bf00-e8d6-48c0-b6dd-052af5d7487f",
                            ContactName = "Koen Crucke",
                            CreatedOn = new DateTime(2021, 5, 28, 10, 59, 6, 529, DateTimeKind.Local).AddTicks(3320),
                            Email = "crucke@zanger.be",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "03/026.754",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e20058fc-2453-4ad3-887f-b03fe1aabcd4",
                            TwoFactorEnabled = false,
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "6e1d118f-f82d-4a6b-8cdc-7422313ddec0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "651e8b42-26c9-4e20-aa74-5bc253f6080f",
                            ContactName = "Bart Kaëll",
                            CreatedOn = new DateTime(2021, 5, 28, 10, 59, 6, 529, DateTimeKind.Local).AddTicks(3335),
                            Email = "kajell@zanger.be",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "306a0703-b52f-4c6e-bd62-89260d82f79d",
                            TwoFactorEnabled = false,
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "57e549ba-0b86-4505-a1f8-0af24ec50eec",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7aeb035a-678d-4177-b769-c45317af13a7",
                            ContactName = "Luk Steeno",
                            CreatedOn = new DateTime(2021, 5, 28, 10, 59, 6, 529, DateTimeKind.Local).AddTicks(3349),
                            Email = "steeno@zanger.be",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "84fd7526-1c8e-4811-a630-2b611cadcdbd",
                            TwoFactorEnabled = false,
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("DataAccess.Data.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BnBId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsVacant")
                        .HasColumnType("bit");

                    b.Property<int>("Occupancy")
                        .HasColumnType("int");

                    b.Property<bool>("PetsAllowed")
                        .HasColumnType("bit");

                    b.Property<double>("Rate")
                        .HasColumnType("float");

                    b.Property<string>("RoomDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoomSize")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RoomId");

                    b.HasIndex("BnBId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            RoomId = 1,
                            BnBId = 1,
                            CreatedDate = new DateTime(2021, 5, 28, 10, 59, 6, 531, DateTimeKind.Local).AddTicks(2527),
                            IsVacant = true,
                            Occupancy = 2,
                            PetsAllowed = false,
                            Rate = 105.0,
                            RoomName = "Hommelkamer",
                            RoomSize = 36,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoomId = 2,
                            BnBId = 1,
                            CreatedDate = new DateTime(2021, 5, 28, 10, 59, 6, 531, DateTimeKind.Local).AddTicks(5554),
                            IsVacant = true,
                            Occupancy = 2,
                            PetsAllowed = false,
                            Rate = 100.0,
                            RoomName = "Rozenkamer",
                            RoomSize = 28,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoomId = 3,
                            BnBId = 1,
                            CreatedDate = new DateTime(2021, 5, 28, 10, 59, 6, 531, DateTimeKind.Local).AddTicks(5573),
                            IsVacant = false,
                            Occupancy = 3,
                            PetsAllowed = false,
                            Rate = 115.0,
                            RoomName = "Wespenkamer",
                            RoomSize = 46,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoomId = 4,
                            BnBId = 2,
                            CreatedDate = new DateTime(2021, 5, 28, 10, 59, 6, 531, DateTimeKind.Local).AddTicks(5577),
                            IsVacant = true,
                            Occupancy = 1,
                            PetsAllowed = false,
                            Rate = 97.0,
                            RoomName = "Bijenkamer",
                            RoomSize = 35,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoomId = 5,
                            BnBId = 2,
                            CreatedDate = new DateTime(2021, 5, 28, 10, 59, 6, 531, DateTimeKind.Local).AddTicks(5580),
                            IsVacant = true,
                            Occupancy = 4,
                            PetsAllowed = false,
                            Rate = 124.0,
                            RoomName = "Mierenkamer",
                            RoomSize = 29,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoomId = 6,
                            BnBId = 2,
                            CreatedDate = new DateTime(2021, 5, 28, 10, 59, 6, 531, DateTimeKind.Local).AddTicks(5584),
                            IsVacant = false,
                            Occupancy = 2,
                            PetsAllowed = false,
                            Rate = 116.0,
                            RoomName = "Duizendpootkamer",
                            RoomSize = 26,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoomId = 7,
                            BnBId = 3,
                            CreatedDate = new DateTime(2021, 5, 28, 10, 59, 6, 531, DateTimeKind.Local).AddTicks(5587),
                            IsVacant = true,
                            Occupancy = 2,
                            PetsAllowed = false,
                            Rate = 119.0,
                            RoomName = "Muggenkamer",
                            RoomSize = 36,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoomId = 8,
                            BnBId = 4,
                            CreatedDate = new DateTime(2021, 5, 28, 10, 59, 6, 531, DateTimeKind.Local).AddTicks(5590),
                            IsVacant = true,
                            Occupancy = 3,
                            PetsAllowed = false,
                            Rate = 100.0,
                            RoomName = "Spinnenkamer",
                            RoomSize = 28,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoomId = 9,
                            BnBId = 4,
                            CreatedDate = new DateTime(2021, 5, 28, 10, 59, 6, 531, DateTimeKind.Local).AddTicks(5594),
                            IsVacant = true,
                            Occupancy = 2,
                            PetsAllowed = false,
                            Rate = 99.0,
                            RoomName = "Tulpenkamer",
                            RoomSize = 36,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoomId = 10,
                            BnBId = 4,
                            CreatedDate = new DateTime(2021, 5, 28, 10, 59, 6, 531, DateTimeKind.Local).AddTicks(5597),
                            IsVacant = true,
                            Occupancy = 1,
                            PetsAllowed = false,
                            Rate = 107.0,
                            RoomName = "Chrysantenkamer",
                            RoomSize = 38,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoomId = 11,
                            BnBId = 4,
                            CreatedDate = new DateTime(2021, 5, 28, 10, 59, 6, 531, DateTimeKind.Local).AddTicks(5600),
                            IsVacant = true,
                            Occupancy = 2,
                            PetsAllowed = false,
                            Rate = 108.0,
                            RoomName = "Freziakamer",
                            RoomSize = 36,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            RoomId = 12,
                            BnBId = 5,
                            CreatedDate = new DateTime(2021, 5, 28, 10, 59, 6, 531, DateTimeKind.Local).AddTicks(5604),
                            IsVacant = false,
                            Occupancy = 5,
                            PetsAllowed = false,
                            Rate = 139.0,
                            RoomName = "Narcissenkamer",
                            RoomSize = 44,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("DataAccess.Data.RoomImage", b =>
                {
                    b.Property<int>("RoomImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<string>("RoomImageSourceUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoomImageId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomImages");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("AmenityBnB", b =>
                {
                    b.HasOne("DataAccess.Data.Amenity", null)
                        .WithMany()
                        .HasForeignKey("AmenitiesAmenityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Data.BnB", null)
                        .WithMany()
                        .HasForeignKey("BnBsBnBId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AmenityRoom", b =>
                {
                    b.HasOne("DataAccess.Data.Amenity", null)
                        .WithMany()
                        .HasForeignKey("AmenitiesAmenityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Data.Room", null)
                        .WithMany()
                        .HasForeignKey("RoomsRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Data.BnBImage", b =>
                {
                    b.HasOne("DataAccess.Data.BnB", "BnB")
                        .WithMany("BnBImages")
                        .HasForeignKey("BnBId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BnB");
                });

            modelBuilder.Entity("DataAccess.Data.Contact", b =>
                {
                    b.HasOne("DataAccess.Data.BnB", null)
                        .WithOne("Contacts")
                        .HasForeignKey("DataAccess.Data.Contact", "BnBId");
                });

            modelBuilder.Entity("DataAccess.Data.Room", b =>
                {
                    b.HasOne("DataAccess.Data.BnB", "BnB")
                        .WithMany("Rooms")
                        .HasForeignKey("BnBId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BnB");
                });

            modelBuilder.Entity("DataAccess.Data.RoomImage", b =>
                {
                    b.HasOne("DataAccess.Data.Room", "Room")
                        .WithMany("RoomImages")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DataAccess.Data.Contact", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DataAccess.Data.Contact", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Data.Contact", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DataAccess.Data.Contact", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Data.BnB", b =>
                {
                    b.Navigation("BnBImages");

                    b.Navigation("Contacts");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("DataAccess.Data.Room", b =>
                {
                    b.Navigation("RoomImages");
                });
#pragma warning restore 612, 618
        }
    }
}
