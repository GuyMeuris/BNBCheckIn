@page "/bnb-room"
@using ModelsDTO
@using Business.Repository.IRepository
@using BNBCheckInServer.Components
@using Radzen
@inject IRoomRepository roomRepository
@inject IJSRuntime jsRuntime
@inject Service.IService.IFileUpload fileUpload
@inject NavigationManager navManager


<div class="row mt-4">
    <div class="col-8">
        <h4 class="card-title text-info">B&ampB kamers</h4>
    </div>
    <div class="col-3 offset-1">
        <NavLink href="bnb-room/create" class="btn btn-info form-control">Voeg kamer toe</NavLink>
    </div>
</div>
<br />
<RadzenGrid AllowFiltering="true"
            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
            FilterMode="FilterMode.Advanced" AllowPaging="true" PageSize="8"
            AllowSorting="true" Data="@Rooms" TItem="RoomDTO" ColumnWidth="60px">
    <Columns>
        <RadzenGridColumn TextAlign="TextAlign.Center" TItem="RoomDTO" Property="RoomName" Title="Naam kamer" />
        <RadzenGridColumn TextAlign="TextAlign.Center" TItem="RoomDTO" Property="Occupancy" Title="Bezetting" />
        <RadzenGridColumn TextAlign="TextAlign.Center" TItem="RoomDTO" Property="Rate" Title="Prijs per nacht" />
        <RadzenGridColumn TextAlign="TextAlign.Center" TItem="RoomDTO" Property="RoomSize" Title="Oppervlakte kamer" />
        <RadzenGridColumn TextAlign="TextAlign.Center" TItem="RoomDTO" Title="" >
            <Template Context="data">
                <NavLink href="@($"/bnb-room/edit/{data.RoomId}")" class="btn btn-primary">Wijzigen</NavLink>
                <button class="btn btn-danger" @onclick="() => HandleDelete(data.RoomId)">Verwijderen</button>
            </Template>
        </RadzenGridColumn>
    </Columns>
</RadzenGrid>
<DeleteConfirmation IsParentComponentProcessing="IsProcessing" ConfirmationChanged="ConfirmDelete_Click"></DeleteConfirmation>

@*-----------------------------------------------------------------------------------------------------------------------*@

@code {

    private IEnumerable<RoomDTO> Rooms { get; set; } = new List<RoomDTO>();

    private int? DeleteRoomId { get; set; } = null;

    public bool IsProcessing { get; set; } = false;

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }


    //-----------------------------------------------------------------------------------------------------------------------

    protected async override Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationState;
        if (!authenticationState.User.IsInRole(Common.RoleDefinition.Role_Admin))
        {
            var uri = new Uri(navManager.Uri);
            navManager.NavigateTo($"/identity/account/login?returnUrl={uri.LocalPath}", forceLoad: true);
        }

        Rooms = await roomRepository.GetAllRooms();
    }

    private async Task HandleDelete(int roomId)
    {
        DeleteRoomId = roomId;
        await jsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }

    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsProcessing = true;
        if (isConfirmed && DeleteRoomId is not null)
        {
            RoomDTO hotelRoom = await roomRepository.GetRoom(DeleteRoomId.Value);
            foreach (var image in hotelRoom.RoomImages)
            {
                var imageName = image.RoomImageSourceUrl.Replace($"{navManager.BaseUri}images/", "");
                fileUpload.DeleteFile(imageName);
            }
            await roomRepository.DeleteRoom(DeleteRoomId.Value);
            await jsRuntime.SweetAlertSuccess("De kamer werd succesvol verwijderd!");
            Rooms = await roomRepository.GetAllRooms();
        }
        await jsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        IsProcessing = false;
    }
}
