@page "/bnb-room/create"
@page "/bnb-room/edit/{Id:int}"
@using ModelsDTO
@using System.IO
@using DataAccess.Data
@using Business.Repository.IRepository
@using BNBCheckInServer.Service.IService
@using Serilog
@inject IRoomRepository roomRepository
@inject IImageRepository imageRepository
@inject IFileUpload fileUpload
@inject NavigationManager navManager
@inject IJSRuntime jsRuntime


<div class="row mt-2 mb-5">
    <h3 class="card-title text-info mb-3 ml-3">@Title B&ampB kamer</h3>
    <div class="col-md-6">
        <div class="card p-3">
            <div card="card-body">
                <EditForm Model="@RoomModel" OnValidSubmit="HandleBnBRoomUpsert">
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <label>Naam kamer</label>
                        <InputText @bind-Value="RoomModel.RoomName" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label>Bezetting</label>
                        <InputNumber @bind-Value="RoomModel.Occupancy" class="form-control" />
                        <ValidationMessage For="()=>RoomModel.Occupancy" />
                    </div>
                    <div class="form-group">
                        <label>Prijs per nacht</label>
                        <InputNumber @bind-Value="RoomModel.Rate" class="form-control" />
                        <ValidationMessage For="()=>RoomModel.Rate" />
                    </div>
                    <div class="form-group">
                        <label>Oppervlakte kamer</label>
                        <InputNumber @bind-Value="RoomModel.RoomSize" class="form-control" />
                        <ValidationMessage For="()=>RoomModel.RoomSize" />
                    </div>
                    <div class="form-group mt-3">
                        <label style="margin-right: 10px">Dieren toegelaten?</label>
                        <InputCheckbox @bind-Value="RoomModel.PetsAllowed" class="form-check-inline" />
                    </div>
                    <div class="form-group" style="height:250px;">
                        <label>Beschrijving kamer</label>
                        @*<InputTextArea @bind-Value="RoomModel.RoomDetails" class="form-control" />*@
                        <BlazoredTextEditor @ref="@QuillHtml" Placeholder="Plaats hier een korte beschrijving van de kamer">
                            <ToolbarContent>
                                <select class="ql-header">
                                    <option selected=""></option>
                                    <option value="1"></option>
                                    <option value="2"></option>
                                    <option value="3"></option>
                                    <option value="4"></option>
                                    <option value="5"></option>
                                </select>
                                <span class="ql-formats">
                                    <button class="ql-bold"></button>
                                    <button class="ql-italic"></button>
                                    <button class="ql-underline"></button>
                                    <button class="ql-strike"></button>
                                </span>
                                <span class="ql-formats">
                                    <select class="ql-color"></select>
                                    <select class="ql-background"></select>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-list" value="ordered"></button>
                                    <button class="ql-list" value="bullet"></button>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-link"></button>
                                </span>
                            </ToolbarContent>
                            <EditorContent>

                            </EditorContent>
                        </BlazoredTextEditor>
                    </div>
                    @if (Title == "Maak nieuwe")
                    {
                        <div class="form-group">
                            <label>Hoort bij deze B&ampB:</label>
                            <br />
                            <select class="selectpicker" @bind="RoomModel.BnBId">
                                @*<option>--select--</option>*@
                                @foreach (var item in BnBDTOs)
                                {
                                    <option value="@item.BnBId">@item.BnBName</option>
                                }
                            </select>
                        </div>
                    }
                    <div class="form-group" style="padding-top:70px;">
                        <label>Foto's van de kamer:</label>
                        <br />
                        <InputFile OnChange="HandleImageUpload" multiple></InputFile>
                        <div class="row">

                            @if (IsImageUploadProcesStarted)
                            {
                            <div class="col-md-12">
                                <span><i class="fa fa-spin fa-spinner"></i> Even geduld... afbeeldingen zijn aan het uploaden...</span>
                            </div>
                            }

                            @if (RoomModel.ImageUrls is not null && RoomModel.ImageUrls.Count > 0)
                            {
                                int serial = 1;
                                foreach (var img in RoomModel.ImageUrls)
                                {
                                    <div class="col-md-3 mt-3">
                                        <div class="room-image" style="background: url('@img') 50% 50%">
                                            <span class="room-image-title">@serial</span>
                                        </div>

                                        <button type="button" class="btn btn-outline-danger btn-block mt-4"
                                            @onclick="()=>DeleteImage(img)">
                                            verwijder
                                        </button>

                                    </div>
                                    serial++;
                                }
                            }
                        </div>
                    </div>
                    <div class="form-group">
                        <button class="btn btn-primary">@Title kamer</button>
                        <NavLink href="bnb-room" class="btn btn-secondary">Terug naar overzicht kamers</NavLink>
                    </div>

                </EditForm>
            </div>
        </div>
    </div>
</div>

@*-----------------------------------------------------------------------------------------------------------------------*@

@code {

    [Parameter]
    public int? Id { get; set; }

    private RoomDTO RoomModel { get; set; } = new RoomDTO();

    private ImageDTO RoomImage { get; set; } = new ImageDTO();

    private string Title { get; set; } = "Maak nieuwe";

    private List<string> DeletedImageNames { get; set; } = new List<string>();

    private bool IsImageUploadProcesStarted { get; set; } = false;

    public BlazoredTextEditor QuillHtml { get; set; } = new BlazoredTextEditor();

    // Dit is voorlopig tot de BnB-repository klaar is.
    private List<BnB> BnBDTOs = new List<BnB> {
          new BnB
                {
                    BnBId = 2,
                    BnBName = "Boskant",
                    StreetName = "Terrillstraat",
                    HouseNumber = "8",
                    PostalCode = 3530,
                    Municipality = "Helchteren",
                    Province = "Limburg",
                    VATnr = "BE3526654diefstal",
                    BankAccountNr = "BE59654nogmeerdiefstal",
                    ContactId = 2
                },
                new BnB
                {
                    BnBId = 3,
                    BnBName = "Scheldezicht",
                    StreetName = "Bollekeslei",
                    HouseNumber = "88",
                    PostalCode = 2100,
                    Municipality = "Linkeroever",
                    Province = "Antwerpen",
                    VATnr = "BE3524987diefstal",
                    BankAccountNr = "BE59987nogmeerdiefstal",
                    ContactId = 2
                },
                new BnB
                {
                    BnBId = 4,
                    BnBName = "De Wieg",
                    StreetName = "Beschavingsstraat",
                    HouseNumber = "44",
                    PostalCode = 1730,
                    Municipality = "Kester",
                    Province = "Vlaams-Brabant",
                    VATnr = "BE3524123diefstal",
                    BankAccountNr = "BE59123nogmeerdiefstal",
                    ContactId = 3
                }};

    //-----------------------------------------------------------------------------------------------------------------------

    protected async override Task OnInitializedAsync()
    {
        if (Id != null)
        {
            //Updating
            Title = "Wijzig";
            RoomModel = await roomRepository.GetRoom(Id.Value);
            if (RoomModel?.Images is not null)
            {
                RoomModel.ImageUrls = RoomModel.Images.Select(u => u.ImageSourceUrl).ToList();
            }
        }
        else
        {
            //Creating
            RoomModel = new RoomDTO();
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;
        bool loading = true;
        while (loading)
        {
            try
            {
                if (!string.IsNullOrEmpty(RoomModel.RoomDetails))
                {
                    await this.QuillHtml.LoadHTMLContent(RoomModel.RoomDetails);
                }
                loading = false;
            }
            catch
            {

                await Task.Delay(10);
                loading = true;
            }
        }
    }

    private async Task HandleBnBRoomUpsert()
    {
        try
        {
            var roomDetailsByName = await roomRepository.IsRoomUnique(RoomModel.RoomName, RoomModel.RoomId);
            if (roomDetailsByName is not null)
            {
                await jsRuntime.SweetAlertError("Deze kamer bestaat al! Maak een andere.");
                return;
            }

            if (RoomModel.RoomId != 0 && Title == "Wijzig")
            {
                //Update
                var updatedRoomResult = await roomRepository.UpdateRoom(RoomModel.RoomId, RoomModel);
                //if (RoomModel.ImageUrls is not null && (RoomModel.ImageUrls.Any() || RoomModel.Images.Any()))
                if (RoomModel.ImageUrls is not null && (RoomModel.ImageUrls.Any()))
                {
                    if (DeletedImageNames is not null && DeletedImageNames.Any())
                    {
                        foreach (var deletedImageName in DeletedImageNames)
                        {
                            var imageName = deletedImageName.Replace($"{navManager.BaseUri}images/", "");
                            var result = fileUpload.DeleteFile(imageName);
                            await imageRepository.DeleteImageByImageUrl(deletedImageName);
                        }
                    }

                    await AddRoomImages(updatedRoomResult);
                }
                await jsRuntime.SweetAlertSuccess("Deze kamer is gewijzigd!");
            }
            else
            {
                //Create
                RoomModel.RoomDetails = await QuillHtml.GetHTML();
                var createdResult = await roomRepository.CreateRoom(RoomModel);
                if (RoomModel.ImageUrls is not null)
                {
                    await AddRoomImages(createdResult);
                }
                await jsRuntime.SweetAlertSuccess("Deze kamer is succesvol aangemaakt en werd toegevoegd aan de lijst!");
            }
        }
        catch (Exception ex)
        {

            Log.Error(ex, "The room failed to load when invoking the 'HandleBnBRoomUpsert'-method.");
        }

        navManager.NavigateTo("bnb-room");
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        IsImageUploadProcesStarted = true;
        try
        {
            var images = new List<string>();
            if (e.GetMultipleFiles().Count > 0)
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    FileInfo fileInfo = new FileInfo(file.Name);
                    if (fileInfo.Extension.ToLower() == ".jpg" ||
                           fileInfo.Extension.ToLower() == ".jpeg" ||
                              fileInfo.Extension.ToLower() == ".png")
                    {
                        var uploadedImagePath = await fileUpload.UploadFile(file);
                        images.Add(uploadedImagePath);
                    }
                    else
                    {
                        await jsRuntime.SweetAlertError("Enkel .jpg/.jpeg/.png bestanden zijn toegelaten!");
                        return;
                    }
                }

                if (images.Any())
                {
                    if (RoomModel.ImageUrls is not null && RoomModel.ImageUrls.Any())
                    {
                        RoomModel.ImageUrls.AddRange(images);
                    }
                    else
                    {
                        RoomModel.ImageUrls = new List<string>();
                        RoomModel.ImageUrls.AddRange(images);
                    }
                }
                else
                {
                    await jsRuntime.SweetAlertError("Het uploaden van de afbeeldingen is niet gelukt. Probeer opnieuw.");
                    return;
                }
            }
            IsImageUploadProcesStarted = false;
        }

        catch (Exception ex)
        {
            Log.Error(ex, "The image failed to upload when invoking the 'HandleImageUpload'-method.");
        }
    }

    private async Task AddRoomImages(RoomDTO roomDetails)
    {
        foreach (var imageUrl in RoomModel.ImageUrls)
        {
            if (RoomModel.Images is null ||
                    RoomModel.Images.Where(x => x.ImageSourceUrl == imageUrl).Count() == 0)
            {
                RoomImage = new ImageDTO()
                {
                    RoomId = roomDetails.RoomId,
                    ImageSourceUrl = imageUrl
                };
                await imageRepository.CreateImage(RoomImage);
            }

        }
    }

    private async Task DeleteImage(string imageUrl)
    {
        try
        {
            var imageIndex = RoomModel.ImageUrls.FindIndex(x => x == imageUrl);
            var imageName = imageUrl.Replace($"{navManager.BaseUri}images/", "");
            if (RoomModel.RoomId == 0 && Title == "Maak nieuwe")
            {
                //create
                var result = fileUpload.DeleteFile(imageName);
            }
            else
            {
                //update
                DeletedImageNames ??= new List<string>();
                DeletedImageNames.Add(imageUrl);
            }
            RoomModel.ImageUrls.RemoveAt(imageIndex);
        }

        catch (Exception ex)
        {
            Log.Error(ex, "The image was not deleted when invoking the 'DeleteIamge'-method.");
            await jsRuntime.SweetAlertError("Het verwijderen van de afbeelding is niet gelukt. Probeer opnieuw.");
        }
    }
}
